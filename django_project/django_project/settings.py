"""
Django settings for django_project project.

Generated by 'django-admin startproject' using Django 5.0.7.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

from pathlib import Path
from dotenv import load_dotenv

import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
ENV_FILE_PATH = BASE_DIR / ".env"

# 加载 .env 文件
load_dotenv(ENV_FILE_PATH)


# postgreSQL 相關設定
DB_HOST = os.getenv("DB_HOST")
DB_USER = os.getenv("DB_USER")
DB_PWD = os.getenv("DB_PWD")
DB_NAME = os.getenv("DB_NAME")

SECOND_DB_HOST = os.getenv("SECOND_DB_HOST")
SECOND_DB_USER = os.getenv("SECOND_DB_USER")
SECOND_DB_PWD = os.getenv("SECOND_DB_PWD")
SECOND_DB_NAME = os.getenv("SECOND_DB_NAME")

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-b!0cl#9#ojm552oa4q(312+v#y5&wwqt*^d&@dccrgk*qe3jr%"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv("DEBUG").lower() == "true"

ALLOWED_HOSTS = ["*"]


# Application definition

INSTALLED_APPS = [
    # 控制後台主题
    "jazzmin",
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    # my apps
    "article",
    "chat",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "django.middleware.locale.LocaleMiddleware",
]

LANGUAGES = [
    ("en", "English"),
    ("zh-hant", "繁體中文"),
    # 添加其他你想支持的語言
]

USE_I18N = True


ROOT_URLCONF = "django_project.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [os.path.join(BASE_DIR, "templates/")],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "django_project.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": DB_NAME,
        "USER": DB_USER,
        "PASSWORD": DB_PWD,
        "HOST": DB_HOST,
        "PORT": "5432",
    },
    "second_db": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": SECOND_DB_NAME,
        "USER": SECOND_DB_USER,
        "PASSWORD": SECOND_DB_PWD,
        "HOST": SECOND_DB_HOST,
        "PORT": "5432",
    },
}

DATABASE_ROUTERS = ["django_project.dbRouter.DatabaseRouter"]

# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = "static/"
STATICFILES_DIRS = [os.path.join(BASE_DIR, "static")]


# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"


JAZZMIN_SETTINGS = {
    # 控制網站title
    "site_title": "後台管理",
    # 控制sidebar的上方標題
    "site_brand": "Library",
    # 可以在這裡設定logo
    # "site_logo": "books/img/logo.png",
    # 控制登入頁面的logo 可以之後用request.user來判斷要顯示哪一個logo
    "login_logo": None,
    # 控制footer的版權資訊
    "copyright": "Acme Library Ltd",
    # 控制上方的搜尋欄可以搜尋的model，並且搭配admin的search_fields
    "search_model": ["auth.User", "auth.Group", "article.ArticleV2"],
    ############
    # Top Menu #
    ############
    # 上方的navbar
    "topmenu_links": [
        # 除了控制顯示的名稱，也可以控制連結的url，並且可以設定權限
        {"name": "Home", "url": "admin:index", "permissions": ["auth.view_user"]},
        # 可以設定新開視窗
        {
            "name": "Support",
            "url": "https://github.com/farridav/django-jazzmin/issues",
            "new_window": True,
        },
        # 可以設定要去哪個model的頁面 會檢查是否有model的權限
        {"model": "auth.User"},
        # 可以設定要去哪個app的頁面 會檢查是否有app的權限
        {"app": "article"},
    ],
    #############
    # User Menu #
    #############
    # 控制上方user的menu 還能有什麼額外的連結
    "usermenu_links": [
        {
            "name": "Support",
            "url": "https://github.com/farridav/django-jazzmin/issues",
            "new_window": True,
        },
        {"model": "auth.user"},
    ],
    #############
    # Side Menu #
    #############
    # 可以添加自定義的連結
    # "custom_links": {
    #     "article": [
    #         {
    #             "name": "Make Messages",
    #             "url": "make_messages",
    #             "icon": "fas fa-comments",
    #             "permissions": ["auth.view_user"],
    #         }
    #     ]
    # },
    #################
    # Related Modal #
    #################
    # 控制是否顯示related modal還是poup window
    "related_modal_active": False,
    #############
    # UI Tweaks #
    #############
    # 可以添加自定義的css和js
    "custom_css": None,
    "custom_js": None,
    # 控制是否顯示UI建構器
    "show_ui_builder": True,
    # 可以控制是否顯示語言選擇器
    "language_chooser": True,
}
